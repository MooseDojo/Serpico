%link{:href => "/css/bootstrap-suggest.css", :rel => "stylesheet"}/
%script{:src => "/js/bootstrap-suggest.js"}

.span10
  %br
  %h2 #{@finding.title}
  %br
  %br
  %form{ :class => "form-horizontal", :method => 'post', :enctype => 'application/x-www-form-urlencoded'}
    .control-group
      %label{ :class => "control-label", :for => "title" } Title
      .controls
        %input{ :type => 'text', :name => 'title', :value => "#{@finding.title}"}
    -if !@master
      %br
      .control-group
        %label{ :class => "control-label", :for => "assessment_type" } Assessment Type
        .controls
          %select{ :name => "assessment_type" }
            - settings.assessment_types.each do |type|
              - if @finding
                - if type == @finding.assessment_type
                  %option{ :selected => "selected" } #{type}
                - else
                  %option #{type}
    -if @master
      .control-group
        %label{ :class => "control-label", :for => "approved" } Approved
        .controls
          -if @finding.approved
            %input{ :type=>"checkbox", :name => 'approved', :checked=>"checked"}
          - else
            %input{ :type=>"checkbox", :name => 'approved'}
      - if @vulnmap
        .control-group
          %label{ :class => "control-label", :for => "existingvulnmaps" } Vuln IDs mapped to this finding
          .controls
            .table
              %table{ :style => 'width: 220px'}
                - @vulnmaps.each do |vuln|
                  - if vuln.msf_ref
                    %tr
                      %td
                        #{vuln.msf_ref}
                      %td{ :align => "right"}
                        %a{ :class => "btn btn-danger btn-sm", :href => "/mapping/#{@finding.id}/vulnmap/#{vuln.id}/delete"}
                          %i{:class => 'icon-remove icon-white icon-sm', :value => "#{vuln.msf_ref}", :type => "submit", :title => 'Delete'}
        .control-group
          %label{ :class => "control-label", :for => "msf_ref" }
            %a{:href=> '#mymodal', "data-toggle"=>'modal', :class=>'btn btn-info'}
              Add new Vuln ID mapping
          .modal{:id=>'mymodal', :class=>'modal hide fade', :tabindex=>'-1', :role=>'dialog', "aria-labelledby"=>'modal-label', "aria-hidden"=>'true'}
            .modal-header
              %button{:type=>'button', :class=>'close', "data-dismiss"=>"modal", "aria-hidden"=>"true"}
                x
              %h3{:id=>"modal-label"}
                Vulnerability Importing
            .modal-body
              %p
                The references field in Metasploits database contains various types of reference codes.
              %p
                When importing vulnerabilities from Metasploit, Serpico will split these reference codes by comma. Whatever is placed in the Vuln ID mapping field will be checked for a string comparison upon import. This allows Serpico to support any type of vendor/tool that Metasploit supports.
              %h4 Big fat Warning
              %p{:class=>"text-error"}
                Metasploit doesn't do the best job at parsing these reference codes. Use CVEs over vendor specific IDs whenever possible. Burp is not support via this method. Instead, use the legacy Burp XML importer.
              %br
                %h4 Supported reference codes:
                .table
                  %table{:width => "70%"}
                    %thead{:width => "20%"}
                      %tr
                        %td
                          %b Type
                        %td
                          %b Format to use
                    %tbody{:width => "50%"}
                      %tr
                        %td
                          CVE
                        %td
                          CVE-2020-1234
                      %tr
                        %td
                          Nessus
                        %td
                          NSS-1234
          .controls
            %input{ :type => 'text', :name => 'msf_ref'}
      - if @nessusmap
        .control-group
          %label{ :class => "control-label", :for => "existingnessusmaps" } Nessus IDs Mapped to this finding
          .controls
            .table
              %table{ :style => 'width: 220px'}
                %tbody
                - @nessus.each do |item|
                  - if item.pluginid
                    %tr
                      %td
                        #{item.pluginid}
                      %td{ :align => "right"}
                        %a{ :class => "btn btn-danger btn-xs", :href => "/mapping/#{@finding.id}/nessus/#{item.pluginid}/delete"}
                          %i{:class => 'icon-remove icon-white', :value => "#{item.pluginid}", :type => "submit", :title => 'Delete'}
        .control-group
          %label{ :class => "control-label", :for => "nessus_pluginid" } Add new nessus ID mapping
          .controls
            %input{ :type => 'text', :name => 'nessus_pluginid'}
      - if @burpmap
        .control-group
          %label{ :class => "control-label", :for => "existingburpmaps" } Burp IDs Mapped to this finding
          .controls
            .table
              %table{ :style => 'width: 220px'}
                %tbody
                - @burp.each do |item|
                  - if item.pluginid
                    %tr
                      %td
                        #{item.pluginid}
                      %td{ :align => "right"}
                        %a{ :class => "btn btn-danger btn-xs", :href => "/mapping/#{@finding.id}/burp/#{item.pluginid}/delete"}
                          %i{:class => 'icon-remove icon-white', :value => "#{item.pluginid}", :type => "submit", :title => 'Delete'}
        .control-group
          %label{ :class => "control-label", :for => "burp_pluginid" }
            %a{:href=> '#burpmodal', "data-toggle"=>'modal'}
              Add new Burp ID mapping
          .modal{:id=>'burpmodal', :class=>'modal hide fade', :tabindex=>'-1', :role=>'dialog', "aria-labelledby"=>'modal-label', "aria-hidden"=>'true'}
            .modal-header
              %button{:type=>'button', :class=>'close', "data-dismiss"=>"modal", "aria-hidden"=>"true"}
                x
              %h3{:id=>"modal-label"}
                Mapping Burp findings
            .modal-body
              You can use the following link to help map burp's ids to your findings:
              %br
              %br
              %a{:href=> "http://portswigger.net/burp/help/scanner_issuetypes.html", :target => "_blank"} http://portswigger.net/burp/help/scanner_issuetypes.html
              %br
          .controls
            %input{ :type => 'text', :name => 'burp_pluginid'}
    - if @dread
      .control-group
        %label{ :class => "control-label", :for => "damage" } Damage
        .controls
          %input{ :type => 'number', :min => '1', :max => '10', :name => 'damage', :value => "#{@finding.damage}", :required => true}
      .control-group
        %label{ :class => "control-label", :for => "reproducability" } Reproducibility
        .controls
          %input{ :type => 'number', :min => '1', :max => '10', :name => 'reproducability', :value => "#{@finding.reproducability}", :required => true}
      .control-group
        %label{ :class => "control-label", :for => "exploitability" } Exploitability
        .controls
          %input{ :type => 'number', :min => '1', :max => '10', :name => 'exploitability', :value => "#{@finding.exploitability}", :required => true}
      .control-group
        %label{ :class => "control-label", :for => "affected_users" } Affected Users
        .controls
          %input{ :type => 'number', :min => '1', :max => '10', :name => 'affected_users', :value => "#{@finding.affected_users}", :required => true}
      .control-group
        %label{ :class => "control-label", :for => "discoverability" } Discoverability
        .controls
          %input{ :type => 'number', :min => '1', :max => '10', :name => 'discoverability', :value => "#{@finding.discoverability}", :required => true}
    - elsif @cvss
      .control-group
        %label{ :class => "control-label", :for => "attack_vector" }
          %a{:href=> '#mymodal', "data-toggle"=>'modal', :class=>'btn btn-info'}
            CVSS Vector String
        .controls
          %input{:type => "text", :class=>"form-control", :placeholder=>"CVSS Vector String", :id=>"vs", :style=>"width:35em"}
        .modal{:id=>'mymodal', :class=>'modal hide fade', :tabindex=>'-1', :role=>'dialog', "aria-labelledby"=>'modal-label', "aria-hidden"=>'true'}
          .modal-header
            %button{:type=>'button', :class=>'close', "data-dismiss"=>"modal", "aria-hidden"=>"true"}
              x
            %h3{:id=>"modal-label"}
              CVSS Vector String
          .modal-body
            %link{ :rel=>"stylesheet", :type=>"text/css", :media=>"all", :href=>"/css/cvss.css"}
            %script{ :src => "/js/cvss.js"}
            %div{ :id=>"cvssboard"}
              %script
                function updateDropdown(score){
                var vector = score.trim().split("/");
                for(var i in vector){
                var part = vector[i];

                if (part.length > 0){
                part = part.toUpperCase();
                }
                // AV
                if(part.includes("AV:")){
                if(part.includes(":L")){
                document.getElementById('av').selectedIndex=0;
                }
                if(part.includes(":A")){
                document.getElementById('av').selectedIndex=1;
                }
                if(part.includes(":N")){
                document.getElementById('av').selectedIndex=2;
                }
                }

                // AC
                if(part.includes("AC:")){
                if(part.includes(":H")){
                document.getElementById('ac').selectedIndex=0;
                }
                if(part.includes(":M")){
                document.getElementById('ac').selectedIndex=1;
                }
                if(part.includes(":L")){
                document.getElementById('ac').selectedIndex=2;
                }
                }

                // AU
                if(part.includes("AU:")){
                if(part.includes(":M")){
                document.getElementById('au').selectedIndex=0;
                }
                if(part.includes(":S")){
                document.getElementById('au').selectedIndex=1;
                }
                if(part.includes(":N")){
                document.getElementById('au').selectedIndex=2;
                }
                }

                // C
                if(part.includes("C:")){
                if(part.includes(":N")){
                document.getElementById('c').selectedIndex=0;
                }
                if(part.includes(":P")){
                document.getElementById('c').selectedIndex=1;
                }
                if(part.includes(":C")){
                document.getElementById('c').selectedIndex=2;
                }
                }

                // I
                if(part.includes("I:")){
                if(part.includes(":N")){
                document.getElementById('i').selectedIndex=0;
                }
                if(part.includes(":P")){
                document.getElementById('i').selectedIndex=1;
                }
                if(part.includes(":C")){
                document.getElementById('i').selectedIndex=2;
                }
                }

                // A
                if(part.includes("A:")){
                if(part.includes(":N")){
                document.getElementById('a').selectedIndex=0;
                }
                if(part.includes(":P")){
                document.getElementById('a').selectedIndex=1;
                }
                if(part.includes(":C")){
                document.getElementById('a').selectedIndex=2;
                }
                }

                // E
                if(part.includes("E:")){
                if(part.includes(":ND")){
                document.getElementById('e').selectedIndex=0;
                }
                if(part.includes(":U")){
                document.getElementById('e').selectedIndex=1;
                }
                if(part.includes(":POC")){
                document.getElementById('e').selectedIndex=2;
                }
                if(part.includes(":F")){
                document.getElementById('e').selectedIndex=3;
                }
                if(part.includes(":H")){
                document.getElementById('e').selectedIndex=4;
                }
                }

                // RL
                if(part.includes("RL:")){
                if(part.includes(":ND")){
                document.getElementById('rl').selectedIndex=0;
                }
                if(part.includes(":OF")){
                document.getElementById('rl').selectedIndex=1;
                }
                if(part.includes(":TF")){
                document.getElementById('rl').selectedIndex=2;
                }
                if(part.includes(":W")){
                document.getElementById('rl').selectedIndex=3;
                }
                if(part.includes(":U")){
                document.getElementById('rl').selectedIndex=4;
                }
                }

                // RC
                if(part.includes("RC:")){
                if(part.includes(":ND")){
                document.getElementById('rc').selectedIndex=0;
                }
                if(part.includes(":UC")){
                document.getElementById('rc').selectedIndex=1;
                }
                if(part.includes(":UR")){
                document.getElementById('rc').selectedIndex=2;
                }
                if(part.includes(":C")){
                document.getElementById('rc').selectedIndex=3;
                }
                }

                // CDP
                if(part.includes("CDP:")){
                if(part.includes(":ND")){
                document.getElementById('cdp').selectedIndex=0;
                }
                if(part.includes(":N")){
                document.getElementById('cdp').selectedIndex=1;
                }
                if(part.includes(":LM")){
                document.getElementById('cdp').selectedIndex=2;
                }
                if(part.includes(":MH")){
                document.getElementById('cdp').selectedIndex=3;
                }
                if(part.includes(":H")){
                document.getElementById('cdp').selectedIndex=4;
                }
                }

                // TD
                if(part.includes("TD:")){
                if(part.includes(":ND")){
                document.getElementById('td').selectedIndex=0;
                }
                if(part.includes(":N")){
                document.getElementById('td').selectedIndex=1;
                }
                if(part.includes(":L")){
                document.getElementById('td').selectedIndex=2;
                }
                if(part.includes(":M")){
                document.getElementById('td').selectedIndex=3;
                }
                if(part.includes(":H")){
                document.getElementById('td').selectedIndex=4;
                }
                }

                // CD
                if(part.includes("CR:")){
                if(part.includes(":ND")){
                document.getElementById('cd').selectedIndex=0;
                }
                if(part.includes(":L")){
                document.getElementById('cd').selectedIndex=1;
                }
                if(part.includes(":M")){
                document.getElementById('cd').selectedIndex=2;
                }
                if(part.includes(":H")){
                document.getElementById('cd').selectedIndex=3;
                }
                }

                // IR
                if(part.includes("IR:")){
                if(part.includes(":ND")){
                document.getElementById('ir').selectedIndex=0;
                }
                if(part.includes(":L")){
                document.getElementById('ir').selectedIndex=1;
                }
                if(part.includes(":M")){
                document.getElementById('ir').selectedIndex=2;
                }
                if(part.includes(":H")){
                document.getElementById('ir').selectedIndex=3;
                }
                }

                // AR
                if(part.includes("AR:")){
                if(part.includes(":ND")){
                document.getElementById('ar').selectedIndex=0;
                }
                if(part.includes(":L")){
                document.getElementById('ar').selectedIndex=1;
                }
                if(part.includes(":M")){
                document.getElementById('ar').selectedIndex=2;
                }
                if(part.includes(":H")){
                document.getElementById('ar').selectedIndex=3;
                }
                }
                }}
                var c = new CVSS("cvssboard", {
                onchange: function() {
                window.location.hash = c.get().vector;
                document.getElementById('vs').value = c.get().vector;
                updateDropdown(c.get().vector);
                }
                });

                $("#vs").on('change keydown paste input', function(){
                updateDropdown(this.value);
                });
      .control-group
        %label{ :class => "control-label", :for => "av" } Access Vector
        .controls
          %select{ :name => "av", :id => "av" }
            - settings.av.each do |av|
              - if av == @finding.av
                %option{ :selected => "selected" } #{av}
              - else
                %option #{av}
      .control-group
        %label{ :class => "control-label", :for => "ac" } Access Complexity
        .controls
          %select{ :name => "ac", :id => "ac" }
            - settings.ac.each do |ac|
              - if ac == @finding.ac
                %option{ :selected => "selected" } #{ac}
              - else
                %option #{ac}
      .control-group
        %label{ :class => "control-label", :for => "au" } Authentication
        .controls
          %select{ :name => "au", :id => "au" }
            - settings.au.each do |au|
              - if au == @finding.au
                %option{ :selected => "selected" } #{au}
              - else
                %option #{au}
      .control-group
        %label{ :class => "control-label", :for => "c" } Confidentiality Impact
        .controls
          %select{ :name => "c", :id => "c" }
            - settings.c.each do |c|
              - if c == @finding.c
                %option{ :selected => "selected" } #{c}
              - else
                %option #{c}
      .control-group
        %label{ :class => "control-label", :for => "i" } Integrity Impact
        .controls
          %select{ :name => "i", :id => "i" }
            - settings.i.each do |i|
              - if i == @finding.i
                %option{ :selected => "selected" } #{i}
              - else
                %option #{i}
      .control-group
        %label{ :class => "control-label", :for => "a" } Availability Impact
        .controls
          %select{ :name => "a", :id => "a" }
            - settings.a.each do |a|
              - if a == @finding.a
                %option{ :selected => "selected" } #{a}
              - else
                %option #{a}
      .control-group
        %label{ :class => "control-label", :for => "e" } Exploitability
        .controls
          %select{ :name => "e", :id => "e" }
            - settings.e.each do |e|
              - if e == @finding.e
                %option{ :selected => "selected" } #{e}
              - else
                %option #{e}
      .control-group
        %label{ :class => "control-label", :for => "rl" } Remediation Level
        .controls
          %select{ :name => "rl", :id => "rl" }
            - settings.rl.each do |rl|
              - if rl == @finding.rl
                %option{ :selected => "selected" } #{rl}
              - else
                %option #{rl}
      .control-group
        %label{ :class => "control-label", :for => "rc" } Report Confidence
        .controls
          %select{ :name => "rc", :id => "rc" }
            - settings.rc.each do |rc|
              - if rc == @finding.rc
                %option{ :selected => "selected" } #{rc}
              - else
                %option #{rc}
      .control-group
        %label{ :class => "control-label", :for => "cdp" } Collateral Damage Potential
        .controls
          %select{ :name => "cdp", :id => "cdp" }
            - settings.cdp.each do |cdp|
              - if cdp == @finding.cdp
                %option{ :selected => "selected" } #{cdp}
              - else
                %option #{cdp}
      .control-group
        %label{ :class => "control-label", :for => "td" } Target Distribution
        .controls
          %select{ :name => "td", :id => "td" }
            - settings.td.each do |td|
              - if td == @finding.td
                %option{ :selected => "selected" } #{td}
              - else
                %option #{td}
      .control-group
        %label{ :class => "control-label", :for => "cr" } Confidentiality Requirement
        .controls
          %select{ :name => "cr", :id => "cr" }
            - settings.cr.each do |cr|
              - if cr == @finding.cr
                %option{ :selected => "selected" } #{cr}
              - else
                %option #{cr}
      .control-group
        %label{ :class => "control-label", :for => "ir" } Integrity Requirement
        .controls
          %select{ :name => "ir", :id => "ir" }
            - settings.ir.each do |ir|
              - if ir == @finding.ir
                %option{ :selected => "selected" } #{ir}
              - else
                %option #{ir}
      .control-group
        %label{ :class => "control-label", :for => "ar" } Availability Requirement
        .controls
          %select{ :name => "ar", :id => "ar" }
            - settings.ar.each do |ar|
              - if ar == @finding.ar
                %option{ :selected => "selected" } #{ar}
              - else
                %option #{ar}
    - elsif @cvssv3
      .control-group
        %label{ :class => "control-label", :for => "attack_vector" }
          %a{:href=> '#mymodal', "data-toggle"=>'modal', :class=>'btn btn-info'}
            CVSS Vector String
        .controls
          %input{:type => "text", :class=>"form-control", :placeholder=>"CVSS Vector String", :id=>"vs", :style=>"width:35em"}
        .modal{:id=>'mymodal', :class=>'modal hide fade', :tabindex=>'-1', :role=>'dialog', "aria-labelledby"=>'modal-label', "aria-hidden"=>'true'}
          .modal-header
            %button{:type=>'button', :class=>'close', "data-dismiss"=>"modal", "aria-hidden"=>"true"}
              x
            %h3{:id=>"modal-label"}
              CVSS Vector String
          .modal-body
            %link{ :rel=>"stylesheet", :type=>"text/css", :media=>"all", :href=>"/css/cvss.css"}
            %script{ :src => "/js/cvss3.js"}
            %div{ :id=>"cvssboard"}
              %script
                function updateDropdown(score){

                var vector = score.trim().split("/");
                for(var i in vector){
                var part = vector[i];

                if (part.length > 0){
                part = part.toUpperCase();
                }

                //CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N/RL:O/CR:L
                // AV
                // LANP
                if(part.includes("AV:") && !part.includes("MAV:")){
                if(part.includes(":L")){
                document.getElementById('attack_vector').selectedIndex=0;
                }
                if(part.includes(":A")){
                document.getElementById('attack_vector').selectedIndex=1;
                }
                if(part.includes(":N")){
                document.getElementById('attack_vector').selectedIndex=2;
                }
                if(part.includes(":P")){
                document.getElementById('attack_vector').selectedIndex=3;
                }
                }

                // AC
                if(part.includes("AC:")  && !part.includes("MAC:")){
                if(part.includes(":L")){
                document.getElementById('attack_complexity').selectedIndex=0;
                }
                if(part.includes(":H")){
                document.getElementById('attack_complexity').selectedIndex=1;
                }
                }

                // PR NLH
                if(part.includes("PR:")  && !part.includes("MPR:")){
                if(part.includes(":N")){
                document.getElementById('privileges_required').selectedIndex=0;
                }
                if(part.includes(":L")){
                document.getElementById('privileges_required').selectedIndex=1;
                }
                if(part.includes(":H")){
                document.getElementById('privileges_required').selectedIndex=2;
                }
                }

                // UI
                if(part.includes("UI:")){
                if(part.includes(":N")){
                document.getElementById('user_interaction').selectedIndex=0;
                }
                if(part.includes(":R")){
                document.getElementById('user_interaction').selectedIndex=1;
                }
                }

                // S
                if(part.includes("S:")  && !part.includes("MS:")){
                if(part.includes(":U")){
                document.getElementById('scope').selectedIndex=0;
                }
                if(part.includes(":C")){
                document.getElementById('scope').selectedIndex=1;
                }
                }

                // I
                if(part.includes("I:")  && !part.includes("MI:")){
                if(part.includes(":N")){
                document.getElementById('integrity').selectedIndex=0;
                }
                if(part.includes(":L")){
                document.getElementById('integrity').selectedIndex=1;
                }
                if(part.includes(":H")){
                document.getElementById('integrity').selectedIndex=2;
                }
                }

                // C
                if(part.includes("C:") && !part.includes("MC:") && !part.includes("MAC:")){
                if(part.includes(":N")){
                document.getElementById('confidentiality-impact').selectedIndex=0;
                }
                if(part.includes(":L")){
                document.getElementById('confidentiality-impact').selectedIndex=1;
                }
                if(part.includes(":H")){
                document.getElementById('confidentiality-impact').selectedIndex=2;
                }
                }

                // A
                if(part.includes("A:")  && !part.includes("MA:")){
                if(part.includes(":N")){
                document.getElementById('availability').selectedIndex=0;
                }
                if(part.includes(":L")){
                document.getElementById('availability').selectedIndex=1;
                }
                if(part.includes(":H")){
                document.getElementById('availability').selectedIndex=2;
                }
                }

                // Exploit Code Maturity
                if(part.includes("E:")){
                if(part.includes(":X")){
                document.getElementById('exploit_maturity').selectedIndex=0;
                }
                if(part.includes(":U")){
                document.getElementById('exploit_maturity').selectedIndex=1;
                }
                if(part.includes(":P")){
                document.getElementById('exploit_maturity').selectedIndex=2;
                }
                if(part.includes(":F")){
                document.getElementById('exploit_maturity').selectedIndex=3;
                }
                }


                // Remediation Level
                if(part.includes("RL:")){
                if(part.includes(":X")){
                document.getElementById('remeditation_level').selectedIndex=0;
                }
                if(part.includes(":O")){
                document.getElementById('remeditation_level').selectedIndex=1;
                }
                if(part.includes(":T")){
                document.getElementById('remeditation_level').selectedIndex=2;
                }
                if(part.includes(":W")){
                document.getElementById('remeditation_level').selectedIndex=3;
                }
                if(part.includes(":U")){
                document.getElementById('remeditation_level').selectedIndex=4;
                }
                }


                // report confidence
                if(part.includes("RC:")){
                if(part.includes(":X")){
                document.getElementById('report_confidence').selectedIndex=0;
                }
                if(part.includes(":U")){
                document.getElementById('report_confidence').selectedIndex=1;
                }
                if(part.includes(":R")){
                document.getElementById('report_confidence').selectedIndex=2;
                }
                if(part.includes(":C")){
                document.getElementById('report_confidence').selectedIndex=3;
                }
                }

                // confidentiality-requirement
                if(part.includes("CR:")){
                if(part.includes(":X")){
                document.getElementById('confidentiality_requirement').selectedIndex=0;
                }
                if(part.includes(":L")){
                document.getElementById('confidentiality_requirement').selectedIndex=1;
                }
                if(part.includes(":M")){
                document.getElementById('confidentiality_requirement').selectedIndex=2;
                }
                if(part.includes(":H")){
                document.getElementById('confidentiality_requirement').selectedIndex=3;
                }
                }

                // integrity-requirement
                if(part.includes("IR:")){
                if(part.includes(":X")){
                document.getElementById('integrity_requirement').selectedIndex=0;
                }
                if(part.includes(":L")){
                document.getElementById('integrity_requirement').selectedIndex=1;
                }
                if(part.includes(":M")){
                document.getElementById('integrity_requirement').selectedIndex=2;
                }
                if(part.includes(":H")){
                document.getElementById('integrity_requirement').selectedIndex=3;
                }
                }


                // integrity-requirement
                if(part.includes("AR:")){
                if(part.includes(":X")){
                document.getElementById('availability_requirement').selectedIndex=0;
                }
                if(part.includes(":L")){
                document.getElementById('availability_requirement').selectedIndex=1;
                }
                if(part.includes(":M")){
                document.getElementById('availability_requirement').selectedIndex=2;
                }
                if(part.includes(":H")){
                document.getElementById('availability_requirement').selectedIndex=3;
                }
                }

                // modified-attack-vector
                if(part.includes("MAV:")){
                if(part.includes(":X")){
                document.getElementById('mod_attack_vector').selectedIndex=0;
                }
                if(part.includes(":L")){
                document.getElementById('mod_attack_vector').selectedIndex=1;
                }
                if(part.includes(":A")){
                document.getElementById('mod_attack_vector').selectedIndex=2;
                }
                if(part.includes(":N")){
                document.getElementById('mod_attack_vector').selectedIndex=3;
                }
                if(part.includes(":P")){
                document.getElementById('mod_attack_vector').selectedIndex=4;
                }
                }

                // modified-attack-vector
                if(part.includes("MAC:")){
                if(part.includes(":X")){
                document.getElementById('mod_attack_complexity').selectedIndex=0;
                }
                if(part.includes(":L")){
                document.getElementById('mod_attack_complexity').selectedIndex=1;
                }
                if(part.includes(":H")){
                document.getElementById('mod_attack_complexity').selectedIndex=2;
                }
                }

                // modified-privileges-Required
                if(part.includes("MPR:")){
                if(part.includes(":X")){
                document.getElementById('mod_privileges_required').selectedIndex=0;
                }
                if(part.includes(":N")){
                document.getElementById('mod_privileges_required').selectedIndex=1;
                }
                if(part.includes(":L")){
                document.getElementById('mod_privileges_required').selectedIndex=2;
                }
                if(part.includes(":H")){
                document.getElementById('mod_privileges_required').selectedIndex=3;
                }
                }

                // modified-user-interaction
                if(part.includes("MUI:")){
                if(part.includes(":X")){
                document.getElementById('mod_user_interaction').selectedIndex=0;
                }
                if(part.includes(":N")){
                document.getElementById('mod_user_interaction').selectedIndex=1;
                }
                if(part.includes(":R")){
                document.getElementById('mod_user_interaction').selectedIndex=2;
                }
                }


                // modified-scope
                if(part.includes("MS:")){
                if(part.includes(":X")){
                document.getElementById('mod_scope').selectedIndex=0;
                }
                if(part.includes(":U")){
                document.getElementById('mod_scope').selectedIndex=1;
                }
                if(part.includes(":C")){
                document.getElementById('mod_scope').selectedIndex=2;
                }
                }

                // modified-confidentiality
                if(part.includes("MC:")){
                if(part.includes(":X")){
                document.getElementById('mod_confidentiality').selectedIndex=0;
                }
                if(part.includes(":N")){
                document.getElementById('mod_confidentiality').selectedIndex=1;
                }
                if(part.includes(":L")){
                document.getElementById('mod_confidentiality').selectedIndex=2;
                }
                if(part.includes(":H")){
                document.getElementById('mod_confidentiality').selectedIndex=3;
                }
                }

                // modified-integrity
                if(part.includes("MI:")){
                if(part.includes(":X")){
                document.getElementById('mod_integrity').selectedIndex=0;
                }
                if(part.includes(":N")){
                document.getElementById('mod_integrity').selectedIndex=1;
                }
                if(part.includes(":L")){
                document.getElementById('mod_integrity').selectedIndex=2;
                }
                if(part.includes(":H")){
                document.getElementById('mod_integrity').selectedIndex=3;
                }
                }


                // modified-availability
                if(part.includes("MA:")){
                if(part.includes(":X")){
                document.getElementById('mod_availability').selectedIndex=0;
                }
                if(part.includes(":N")){
                document.getElementById('mod_availability').selectedIndex=1;
                }
                if(part.includes(":L")){
                document.getElementById('mod_availability').selectedIndex=2;
                }
                if(part.includes(":H")){
                document.getElementById('mod_availability').selectedIndex=3;
                }
                }
                }}

                var c = new CVSS("cvssboard", {
                onchange: function() {
                document.getElementById('vs').value = c.get().vector;
                updateDropdown(c.get().vector);
                }
                });

                $("#vs").on('change keydown paste input', function(){
                updateDropdown(this.value);
                });
      %span{:class=>"input-group-btn"}
      .control-group
        %label{ :class => "control-label", :for => "attack_vector" } Attack Vector
        .controls
          %select{ :name => "attack_vector", :id => "attack_vector"  }
            - settings.attack_vector.each do |attack_vector|
              - if attack_vector == @finding.attack_vector
                %option{ :selected => "selected" } #{attack_vector}
              - else
                %option #{attack_vector}
      .control-group
        %label{ :class => "control-label", :for => "attack_complexity" } Attack Complexity
        .controls
          %select{ :name => "attack_complexity", :id =>  "attack_complexity" }
            - settings.attack_complexity.each do |attack_complexity|
              - if attack_complexity == @finding.attack_complexity
                %option{ :selected => "selected" } #{attack_complexity}
              - else
                %option #{attack_complexity}
      .control-group
        %label{ :class => "control-label", :for => "privileges_required" } Privileges Required
        .controls
          %select{ :name => "privileges_required", :id =>  "privileges_required" }
            - settings.privileges_required.each do |privileges_required|
              - if privileges_required == @finding.privileges_required
                %option{ :selected => "selected" } #{privileges_required}
              - else
                %option #{privileges_required}
      .control-group
        %label{ :class => "control-label", :for => "user_interaction" } User Interaction
        .controls
          %select{ :name => "user_interaction", :id => "user_interaction"  }
            - settings.user_interaction.each do |user_interaction|
              - if user_interaction == @finding.user_interaction
                %option{ :selected => "selected" } #{user_interaction}
              - else
                %option #{user_interaction}
      .control-group
        %label{ :class => "control-label", :for => "scope_cvss" } Scope
        .controls
          %select{ :name => "scope_cvss", :id => "scope"  }
            - settings.scope_cvss.each do |scope_cvss|
              - if scope_cvss == @finding.scope_cvss
                %option{ :selected => "selected" } #{scope_cvss}
              - else
                %option #{scope_cvss}
      .control-group
        %label{ :class => "control-label", :for => "confidentiality" } Confidentiality
        .controls
          %select{ :name => "confidentiality", :id => "confidentiality-impact" }
            - settings.confidentiality.each do |confidentiality|
              - if confidentiality == @finding.confidentiality
                %option{ :selected => "selected" } #{confidentiality}
              - else
                %option #{confidentiality}
      .control-group
        %label{ :class => "control-label", :for => "integrity" } Integrity
        .controls
          %select{ :name => "integrity", :id => "integrity" }
            - settings.integrity.each do |integrity|
              - if integrity == @finding.integrity
                %option{ :selected => "selected" } #{integrity}
              - else
                %option #{integrity}
      .control-group
        %label{ :class => "control-label", :for => "availability" } Availability
        .controls
          %select{ :name => "availability", :id => "availability" }
            - settings.availability.each do |availability|
              - if availability == @finding.availability
                %option{ :selected => "selected" } #{availability}
              - else
                %option #{availability}
      .control-group
        %label{ :class => "control-label", :for => "exploit_maturity" } Exploit Code Maturity
        .controls
          %select{ :name => "exploit_maturity", :id => "exploit_maturity"  }
            - settings.exploit_maturity.each do |exploit_maturity|
              - if exploit_maturity == @finding.exploit_maturity
                %option{ :selected => "selected" } #{exploit_maturity}
              - else
                %option #{exploit_maturity}
      .control-group
        %label{ :class => "control-label", :for => "remeditation_level" } Remediation Level
        .controls
          %select{ :name => "remeditation_level", :id => "remeditation_level" }
            - settings.remeditation_level.each do |remeditation_level|
              - if remeditation_level == @finding.remeditation_level
                %option{ :selected => "selected" } #{remeditation_level}
              - else
                %option #{remeditation_level}
      .control-group
        %label{ :class => "control-label", :for => "report_confidence" } Report Confidence
        .controls
          %select{ :name => "report_confidence", :id => "report_confidence" }
            - settings.report_confidence.each do |report_confidence|
              - if report_confidence == @finding.report_confidence
                %option{ :selected => "selected" } #{report_confidence}
              - else
                %option #{report_confidence}
      .control-group
        %label{ :class => "control-label", :for => "confidentiality_requirement" } Confidentiality Requirement
        .controls
          %select{ :name => "confidentiality_requirement", :id => "confidentiality_requirement"  }
            - settings.confidentiality_requirement.each do |confidentiality_requirement|
              - if confidentiality_requirement == @finding.confidentiality_requirement
                %option{ :selected => "selected" } #{confidentiality_requirement}
              - else
                %option #{confidentiality_requirement}
      .control-group
        %label{ :class => "control-label", :for => "integrity_requirement" } Integrity Requirement
        .controls
          %select{ :name => "integrity_requirement", :id => "integrity_requirement" }
            - settings.integrity_requirement.each do |integrity_requirement|
              - if integrity_requirement == @finding.integrity_requirement
                %option{ :selected => "selected" } #{integrity_requirement}
              - else
                %option #{integrity_requirement}
      .control-group
        %label{ :class => "control-label", :for => "availability_requirement" } Availability Requirement
        .controls
          %select{ :name => "availability_requirement", :id => "availability_requirement" }
            - settings.availability_requirement.each do |availability_requirement|
              - if availability_requirement == @finding.availability_requirement
                %option{ :selected => "selected" } #{availability_requirement}
              - else
                %option #{availability_requirement}
      .control-group
        %label{ :class => "control-label", :for => "mod_attack_vector" } Modified Attack Vector
        .controls
          %select{ :name => "mod_attack_vector", :id => "mod_attack_vector" }
            - settings.mod_attack_vector.each do |mod_attack_vector|
              - if mod_attack_vector == @finding.mod_attack_vector
                %option{ :selected => "selected" } #{mod_attack_vector}
              - else
                %option #{mod_attack_vector}
      .control-group
        %label{ :class => "control-label", :for => "mod_attack_complexity" } Modified Attack Complexity
        .controls
          %select{ :name => "mod_attack_complexity", :id => "mod_attack_complexity" }
            - settings.mod_attack_complexity.each do |mod_attack_complexity|
              - if mod_attack_complexity == @finding.mod_attack_complexity
                %option{ :selected => "selected" } #{mod_attack_complexity}
              - else
                %option #{mod_attack_complexity}
      .control-group
        %label{ :class => "control-label", :for => "mod_privileges_required" } Modified Privileges Required
        .controls
          %select{ :name => "mod_privileges_required", :id => "mod_privileges_required" }
            - settings.mod_privileges_required.each do |mod_privileges_required|
              - if mod_privileges_required == @finding.mod_privileges_required
                %option{ :selected => "selected" } #{mod_privileges_required}
              - else
                %option #{mod_privileges_required}
      .control-group
        %label{ :class => "control-label", :for => "mod_user_interaction" } Modified User Interaction
        .controls
          %select{ :name => "mod_user_interaction", :id => "mod_user_interaction" }
            - settings.mod_user_interaction.each do |mod_user_interaction|
              - if mod_user_interaction == @finding.mod_user_interaction
                %option{ :selected => "selected" } #{mod_user_interaction}
              - else
                %option #{mod_user_interaction}
      .control-group
        %label{ :class => "control-label", :for => "mod_scope" } Modified Scope
        .controls
          %select{ :name => "mod_scope", :id => "mod_scope" }
            - settings.mod_scope.each do |mod_scope|
              - if mod_scope == @finding.mod_scope
                %option{ :selected => "selected" } #{mod_scope}
              - else
                %option #{mod_scope}
      .control-group
        %label{ :class => "control-label", :for => "mod_confidentiality" } Modified Confidentiality
        .controls
          %select{ :name => "mod_confidentiality", :id => "mod_confidentiality" }
            - settings.mod_confidentiality.each do |mod_confidentiality|
              - if mod_confidentiality == @finding.mod_confidentiality
                %option{ :selected => "selected" } #{mod_confidentiality}
              - else
                %option #{mod_confidentiality}
      .control-group
        %label{ :class => "control-label", :for => "mod_integrity" } Modified Integrity
        .controls
          %select{ :name => "mod_integrity", :id => "mod_integrity" }
            - settings.mod_integrity.each do |mod_integrity|
              - if mod_integrity == @finding.mod_integrity
                %option{ :selected => "selected" } #{mod_integrity}
              - else
                %option #{mod_integrity}
      .control-group
        %label{ :class => "control-label", :for => "mod_availability" } Modified Availability
        .controls
          %select{ :name => "mod_availability", :id => "mod_availability" }
            - settings.mod_availability.each do |mod_availability|
              - if mod_availability == @finding.mod_availability
                %option{ :selected => "selected" } #{mod_availability}
              - else
                %option #{mod_availability}
    - elsif @riskmatrix
      .control-group
        %label{ :class => "control-label", :for => "risk" } Vulnerability Risk Level
        .controls
          %select{ :name => "risk" }
            - risk_types = ["None", "Low", "Moderate", "High", "Critical"]
              - if !@finding.risk
                - @finding.risk = @finding.dread_total/10
                - @finding.risk = 4 if dread_total == 50
              - [0,1,2,3,4].each do |r_type|
              - if r_type == @finding.risk
                %option{ :value => "#{r_type}", :selected => "selected" } #{risk_types[r_type]}
              - else
                %option{ :value => "#{r_type}"} #{risk_types[r_type]}
      .control-group
        %label{ :class => "control-label", :for => "severity" } Severity
        .controls
          %select{ :name => "severity" }
            - settings.severity.each do |severity|
              - if severity == @finding.severity
                %option{ :selected => "selected" } #{severity}
              - else
                %option #{severity}
      .control-group
        %label{ :class => "control-label", :for => "severity_rationale" } Severity Rationale
        .controls
          %textarea{ :rows => '3', :class => 'input-xxlarge allowMarkupShortcut', :id => 'severity_rationale', :name => 'severity_rationale'}
            - if @finding
              - if @finding.severity_rationale
                #{meta_markup(@finding.severity_rationale)}
      .control-group
        %label{ :class => "control-label", :for => "likelihood" } Likelihood
        .controls
          %select{ :name => "likelihood" }
            - settings.likelihood.each do |likelihood|
              - if likelihood == @finding.likelihood
                %option{ :selected => "selected" } #{likelihood}
              - else
                %option #{likelihood}
      .control-group
        %label{ :class => "control-label", :for => "likelihood_rationale" } Likelihood Rationale
        .controls
          %textarea{ :rows => '3', :class => 'input-xxlarge allowMarkupShortcut', :id => 'likelihood_rationale', :name => 'likelihood_rationale'}
            - if @finding
              - if @finding.likelihood_rationale
                #{meta_markup(@finding.likelihood_rationale)}
    - else
      .control-group
        %label{ :class => "control-label", :for => "risk" } Vulnerability Risk Level
        .controls
          %select{ :name => "risk" }
            - risk_types = ["Informational", "Low", "Moderate", "High", "Critical"]
            - if !@finding.risk
              - @finding.risk = @finding.dread_total/10
              - @finding.risk = 4 if dread_total == 50
            - [0,1,2,3,4].each do |r_type|
              - if r_type == @finding.risk
                %option{ :value => "#{r_type}", :selected => "selected" } #{risk_types[r_type]}
              - else
                %option{ :value => "#{r_type}"} #{risk_types[r_type]}
    .control-group
      %label{ :class => "control-label", :for => "effort" } Remediation Effort
      .controls
        %select{ :name => "effort" }
          - settings.effort.each do |effort|
            - if effort == @finding.effort
              %option{ :selected => "selected" } #{effort}
            - else
              %option #{effort}
    .control-group
      %label{ :class => "control-label", :for => "type" } Finding Type
      .controls
        %select{ :name => "type" }
          - settings.finding_types.each do |type|
            - if type == @finding.type
              %option{ :selected => "selected" } #{type}
            - else
              %option #{type}
    .control-group
      %label{ :class => "control-label", :for => "overview" }
        %a{:href=> '#modaloverview', "data-toggle"=>'modal', :class=>'btn btn-info'}
          Overview
      .modal{:id=>'modaloverview', :class=>'modal hide fade', :tabindex=>'-1', :role=>'dialog', "aria-labelledby"=>'modal-label', "aria-hidden"=>'true'}
        .modal-header
          %button{:type=>'button', :class=>'close', "data-dismiss"=>"modal", "aria-hidden"=>"true"}
            x
          %h3{:id=>"modal-label"}
            Meta Markup
        .modal-body
          %p
            There are four markup sets you can use in the Overview and the Remediation summary. This text is converted inside of Microsoft Word.
            %p{:class=>"text-error"}
              YOU MUST CLOSE ALL TAGS. OTHERWISE YOU CAN DESTROY ALL TEXT FORMATTING. SEE EXAMPLES BELOW.
            %b
              Review the finding "TEST - Markup Tester" for a clear example. As always, press preview to see the finding in Word.
          %h2
            &lt;&lt;CUSTOMER&gt;&gt;
          %p
            If you place &lt;&lt;CUSTOMER&gt;&gt; in a finding the customer name will be substituted in the finding. This is particularly helpful in the Templated Findings.
            %br
            %br
            %code
              Overall &lt;&lt;CUSTOMER&gt;&gt; was found to have a strong...
            %br
            %br
            Will generate the following inside of a report:
            %br
            %br
            %code
              Overall AcmeCorporation was found to have a strong...
          %h2
            Bullets
          %p
            Shortcut : CTRL + ALT + w
            %br
            Place the bulleted text inbetween a *- and a -* like so:
            %br
            %br
            %code
              *- Bulleted text goes here -*
          %h2
            Paragraph Heading Text
          %p
            Shortcut : CTRL + ALT + q
            %br
            Place the heading inbetween a [== and a ==] like so:
            %br
            %br
            %code
              [== Heading text goes here ==]
          %h2
            Italics
          %p
            Shortcut : CTRL + ALT + x
            %br
            Italicize the paragraph containing [~~ and a ~~]:
            %br
            %br
            %code
              [~~ Italics ~~]
          %h2
            Code
          %p
            Shortcut : CTRL + ALT + c
            %br
            Place code inbetween a [[[ and a ]]] like below. CODE CANNOT STRETCH MULTIPLE LINES.
            %br
            %br
            %code
              [[[ code, code goes here ]]]
      .controls
        %textarea{ :rows => '10', :class => 'input-xxlarge allowMarkupShortcut', :id => 'overview', :name => 'overview'}
          - if @finding
            - if @finding.overview
              #{meta_markup(@finding.overview)}
    .control-group
      %label{ :class => "control-label", :for => "pocu" } Proof of Concept
      .controls
        %textarea{ :rows => '10', :class => 'input-xxlarge allowMarkupShortcut', :name => 'poc', :id => "pocu"}
          - if @finding
            - if @finding.poc
              #{meta_markup(@finding.poc)}
    - attachments=''
    - if @attaches
      - @attaches.each do |attach|
        - attachments = attachments + "{name: '#{attach}'},"
    / autosuggest code is care of bootstrap-suggest.js
    :javascript
      var files = [
        #{attachments}
      ];
        $('#pocu').suggest('[', {
          data: files,
          filter: {
              casesensitive: true,
              limit: 10
            },
          map: function(file) {
            return {
              value: '!!'+file.name+'!!]',
              text: '<strong>'+file.name+'</strong>'
            }
          }
        })

    - if !@master
      .control-group
        %label{ :class => "control-label", :for => "affected_hosts" } Affected Hosts/URLs
        .controls
          %textarea{ :rows => '3', :class => 'input-xxlarge allowMarkupShortcut', :name => 'affected_hosts'}
            - if @finding
              - if @finding.affected_hosts
                #{meta_markup(@finding.affected_hosts)}
    .control-group
      %label{ :class => "control-label", :for => "remediation" } Remediation
      .controls
        %textarea{ :rows => '10', :class => 'input-xxlarge allowMarkupShortcut', :name => 'remediation'}
          - if @finding
            - if @finding.remediation
              #{meta_markup(@finding.remediation)}
    .control-group
      %label{ :class => "control-label", :for => "references" } References (One Per Line)
      .controls
        %textarea{ :rows => '5', :class => 'input-xxlarge allowMarkupShortcut', :name => 'references'}
          - if @finding
            - if @finding.references
              #{meta_markup(@finding.references)}
    - if !@master
      .control-group
        %label{ :class => "control-label", :for => "notes" } Notes Data
        %i{:class=>"icon-chevron-down", "data-toggle"=>"collapse", "data-target"=>"#info_2", :id=>"actionButton"}
        .info{ :id => "info_2", :class => "collapse out" }
          %label
            Notes
          .controls
          %textarea{ :rows => '10', :class => 'input-xxlarge allowMarkupShortcut', :name => 'notes'}
            - if @finding
              - if @finding.notes
                #{meta_markup(@finding.notes)}
    - if !@master
      .control-group
        %label{ :class => "control-label", :for => "preso" } Presentation Data
        %i{:class=>"icon-chevron-down", "data-toggle"=>"collapse", "data-target"=>"#info_1", :id=>"actionButton"}
        .info{ :id => "info_1", :class => "collapse out" }
          %label
            Presentation Points (One Per Line)
          .controls
          %textarea{ :rows => '10', :class => 'input-xxlarge allowMarkupShortcut', :name => 'presentation_points'}
            - if @finding
              - if @finding.presentation_points
                #{meta_markup(@finding.presentation_points)}
          %label
            Presentation Remediation Points (One Per Line)
          .controls
          %textarea{ :rows => '10', :class => 'input-xxlarge allowMarkupShortcut', :name => 'presentation_rem_points'}
            - if @finding
              - if @finding.presentation_rem_points
                #{meta_markup(@finding.presentation_rem_points)}


    - id_r = @report ? "/report/#{@report.id}/findings" : "/master/findings"
    %input{:type => 'submit', :value => 'Save'}
    %a{ :href => "#{id_r}"}
      %input{ :type => "button", :value => 'Cancel'}

:javascript
  function confirmDelete(evt) {
    if (!confirm('Are you sure you want to permanently delete the select element ?')) {
      evt.preventDefault();
    }
  }

  var deleteElements = $('a.btn-danger');
  for (var index = 0, length = deleteElements.length; index < length; index++) {
    deleteElements[index].addEventListener('click', confirmDelete, false);
  }
